syntax = "v1"

info (
	title:   "认证服务"
	desc:    "提供用户认证、令牌管理等功能"
	author:  "我的代码温柔如风"
	email:   "liukunup@outlook.com"
	date:    "2025/09/03"
	version: "1.0"
)

// 通用响应体
type BaseResponse {
	Code    int64       `json:"code"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,optional"`
}

type (
	// 获取验证码响应
	CaptchaResp {
		CaptchaID    string `json:"captchaId"`
		CaptchaImage string `json:"captchaImage"` // base64 编码过的图片
		ExpiresIn    int64  `json:"expiresIn"`    // 有效期（秒）
	}

	// 登录请求
	LoginReq {
		Username      string `json:"username" validate:"required"` // 用户名
		Password      string `json:"password" validate:"required"` // 密码
		CaptchaID     string `json:"captchaId,optional"`
		CaptchaAnswer string `json:"captchaAnswer,optional"` // 用户填写的验证码
	}
	// 登录响应
	LoginResp {
		UserID       string `json:"userId"`
		Username     string `json:"username"`
		Email        string `json:"email,optional"`
		Avatar       string `json:"avatar,optional"`
		AccessToken  string `json:"accessToken"`
		RefreshToken string `json:"refreshToken"`
		ExpiresIn    int64  `json:"expiresIn"` // 有效期（秒）
		TokenType    string `json:"tokenType" default:"Bearer"` // 令牌类型
	}

	// 注册请求
	RegisterReq {
		Username      string `json:"username" validate:"required,min=3,max=20"`
		Password      string `json:"password" validate:"required,min=6,max=30"`
		Email         string `json:"email" validate:"required,email"`
		Phone         string `json:"phone,optional" validate:"omitempty,phone"`
		Nickname      string `json:"nickname,optional"`
		CaptchaID     string `json:"captchaId,optional"`
		CaptchaAnswer string `json:"captchaAnswer,optional"`
	}
	// 注册响应
	RegisterResp {
		UserID    string `json:"userId"`
		Username  string `json:"username"`
		Email     string `json:"email"`
		CreatedAt int64  `json:"createdAt"`
	}

	// 刷新令牌请求
	RefreshTokenReq {
		RefreshToken string `json:"refreshToken" validate:"required"`
	}
	// 刷新令牌响应
	RefreshTokenResp {
		AccessToken  string `json:"accessToken"`
		RefreshToken string `json:"refreshToken"`
		ExpiresIn    int64  `json:"expiresIn"`
	}

	// 验证令牌请求
	VerifyTokenReq {
		Token string `json:"token" validate:"required"`
	}
	// 验证令牌响应
	VerifyTokenResp {
		IsValid   bool   `json:"isValid"`
		UserID    string `json:"userId,optional"`
		Username  string `json:"username,optional"`
		ExpiresAt int64  `json:"expiresAt,optional"`
		Message   string `json:"message,optional"`
	}

	// 重置密码请求
	ResetPasswordReq {
		Email         string `json:"email" validate:"required,email"`
		CaptchaID     string `json:"captchaId" validate:"required"`
		CaptchaAnswer string `json:"captchaAnswer" validate:"required"`
		NewPassword   string `json:"newPassword" validate:"required,min=6,max=30"`
	}
)

@server (
	prefix:  /v1
	group:   xxxx
	timeout: 3s
)
service auth-api {
	// 获取验证码
	@handler GetCaptcha
	get /auth/captcha returns (CaptchaResp)

	// 登录
	@handler Login
	post /auth/login (LoginReq) returns (LoginResp)

	// 注册
	@handler Register
	post /auth/register (RegisterReq) returns (RegisterResp)

	// 刷新令牌
	@handler RefreshToken
	post /auth/refresh (RefreshTokenReq) returns (RefreshTokenResp)

	// 验证令牌
	@handler VerifyToken
	post /auth/verify (VerifyTokenReq) returns (VerifyTokenResp)

	// 重置密码
	@handler ResetPassword
	post /auth/password/reset (ResetPasswordReq) returns (BaseResponse)
}

type (
	// 登出请求
	LogoutReq {
		RefreshToken string `json:"refreshToken,optional"`
	}

	// 用户信息
	UserProfile {
		UserID    string `json:"userId"`
		Username  string `json:"username"`
		Email     string `json:"email"`
		Phone     string `json:"phone,optional"`
		Nickname  string `json:"nickname,optional"`
		Avatar    string `json:"avatar,optional"`
		Status    int64  `json:"status"` // 用户状态 0:正常 1:禁用
		CreatedAt int64  `json:"createdAt"`
		UpdatedAt int64  `json:"updatedAt"`
	}

	// 修改密码请求
	ChangePasswordReq {
		OldPassword string `json:"oldPassword" validate:"required"`
		NewPassword string `json:"newPassword" validate:"required,min=6,max=30"`
	}

	// 权限验证请求
	CheckPermissionReq {
		UserID   string `json:"userId" validate:"required"`
		Resource string `json:"resource" validate:"required"`
		Action   string `json:"action" validate:"required"` // read, write, delete等
	}
	// 权限验证响应
	CheckPermissionResp {
		HasPermission bool   `json:"hasPermission"`
		Message       string `json:"message,optional"`
	}

	// 角色列表响应
	UserRolesResp {
		UserID string   `json:"userId"`
		Roles  []string `json:"roles"`
	}
)

@server (
	jwt:        Auth
	prefix:     /v1
	group:      xxx
	timeout:    3s
	middleware: AuthInterceptor
)
service auth-api {
	// 登出
	@handler Logout
	post /auth/logout (LogoutReq) returns (BaseResponse)

	// 获取用户信息
	@handler GetProfile
	get /auth/profile returns (UserProfile)

	// 更新用户信息
	@handler UpdateProfile
	put /auth/profile (UserProfile) returns (BaseResponse)

	// 修改密码
	@handler ChangePassword
	put /auth/password/change (ChangePasswordReq) returns (BaseResponse)

	// 检查用户权限
	@handler CheckPermission
	post /auth/permission/check (CheckPermissionReq) returns (CheckPermissionResp)

	// 获取用户角色
	@handler GetUserRoles
	get /auth/roles returns (UserRolesResp)
}

type (
	// 列出所有用户请求
	ListUsersReq {
		Page     int64  `form:"page,default=1"`
		PageSize int64  `form:"pageSize,default=10"`
		Username string `form:"username,optional"`
		Email    string `form:"email,optional"`
		Status   int64  `form:"status,optional"`
	}
	// 列出所有用户响应
	ListUsersResp {
		Total int64         `json:"total"`
		Users []UserProfile `json:"users"`
	}

	// 更新用户状态请求
	UpdateUserStatusReq {
		UserID string `json:"userId" validate:"required"`
		Status int64  `json:"status" validate:"oneof=0 1"` // 0:正常 1:禁用
	}

	// 为用户分配角色请求
	AssignRolesReq {
		UserID string   `json:"userId" validate:"required"`
		Roles  []string `json:"roles" validate:"required"`
	}
)

@server (
	jwt: Auth
	prefix: /v1
	group: admin
	timeout: 3s
	middleware: AdminAuthInterceptor
)
service auth-api {
	// 列出用户
	@handler ListUsers
	get /auth/admin/users (ListUsersReq) returns (ListUsersResp)

	// 更新用户状态
	@handler UpdateUserStatus
	put /auth/admin/user/status (UpdateUserStatusReq) returns (BaseResponse)

	// 为用户分配角色
	@handler AssignUserRoles
	post /auth/admin/user/roles (AssignRolesReq) returns (BaseResponse)
}

type (
	UserRolesReq {
		UserID string `form:"userId,optional"`
	}
)