// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userFieldNames          = builder.RawFieldNames(&User{})
	userRows                = strings.Join(userFieldNames, ",")
	userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userModel interface {
		Insert(ctx context.Context, data *User) (sql.Result, error)
		FindOne(ctx context.Context, id uint64) (*User, error)
		FindOneByEmail(ctx context.Context, email string) (*User, error)
		FindOneByPublicId(ctx context.Context, publicId string) (*User, error)
		FindOneByUsername(ctx context.Context, username string) (*User, error)
		Update(ctx context.Context, data *User) error
		Delete(ctx context.Context, id uint64) error
	}

	defaultUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	User struct {
		Id                  uint64         `db:"id"`
		PublicId            string         `db:"public_id"`
		Username            string         `db:"username"`
		Email               string         `db:"email"`
		EmailVerified       int64          `db:"email_verified"`
		Phone               sql.NullString `db:"phone"`
		PhoneVerified       int64          `db:"phone_verified"`
		PasswordHash        string         `db:"password_hash"`
		PasswordSalt        sql.NullString `db:"password_salt"`
		MfaSecret           sql.NullString `db:"mfa_secret"`
		MfaEnabled          int64          `db:"mfa_enabled"`
		AccountLocked       int64          `db:"account_locked"`
		FailedLoginAttempts uint64         `db:"failed_login_attempts"`
		LockoutUntil        sql.NullTime   `db:"lockout_until"`
		LastLoginAt         sql.NullTime   `db:"last_login_at"`
		CreatedAt           time.Time      `db:"created_at"`
		UpdatedAt           time.Time      `db:"updated_at"`
	}
)

func newUserModel(conn sqlx.SqlConn) *defaultUserModel {
	return &defaultUserModel{
		conn:  conn,
		table: "`user`",
	}
}

func (m *defaultUserModel) Delete(ctx context.Context, id uint64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserModel) FindOne(ctx context.Context, id uint64) (*User, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userRows, m.table)
	var resp User
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByEmail(ctx context.Context, email string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByPublicId(ctx context.Context, publicId string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `public_id` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, publicId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) FindOneByUsername(ctx context.Context, username string) (*User, error) {
	var resp User
	query := fmt.Sprintf("select %s from %s where `username` = ? limit 1", userRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, username)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.PublicId, data.Username, data.Email, data.EmailVerified, data.Phone, data.PhoneVerified, data.PasswordHash, data.PasswordSalt, data.MfaSecret, data.MfaEnabled, data.AccountLocked, data.FailedLoginAttempts, data.LockoutUntil, data.LastLoginAt)
	return ret, err
}

func (m *defaultUserModel) Update(ctx context.Context, newData *User) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.PublicId, newData.Username, newData.Email, newData.EmailVerified, newData.Phone, newData.PhoneVerified, newData.PasswordHash, newData.PasswordSalt, newData.MfaSecret, newData.MfaEnabled, newData.AccountLocked, newData.FailedLoginAttempts, newData.LockoutUntil, newData.LastLoginAt, newData.Id)
	return err
}

func (m *defaultUserModel) tableName() string {
	return m.table
}
