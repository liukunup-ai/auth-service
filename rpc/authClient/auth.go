// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: auth.proto

package authClient

import (
	"context"

	"auth-service/rpc/auth"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BaseResponse = auth.BaseResponse
	Empty        = auth.Empty
	LoginReq     = auth.LoginReq
	LoginResp    = auth.LoginResp

	Auth interface {
		// 健康检查
		HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResponse, error)
		// 登录
		Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	}

	defaultAuth struct {
		cli zrpc.Client
	}
)

func NewAuth(cli zrpc.Client) Auth {
	return &defaultAuth{
		cli: cli,
	}
}

// 健康检查
func (m *defaultAuth) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BaseResponse, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.HealthCheck(ctx, in, opts...)
}

// 登录
func (m *defaultAuth) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := auth.NewAuthClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}
